@startuml Events
hide footbox
actor external_runner as ER
participant "FrameworkController" as FC
participant "DefaultTestAssemblyBuilder" as DTAB
participant "NunitTestAssemblyrunner" as NTAR
participant "TestProgressReporter" as TPR <<ITestListeeer>> 
participant "TestExecutionContext" as TEC
participant "QueuingEventListener" as QEL
participant "EventQueue" as EQ <<ITestListener>>
participant "Event" as EV
participant "EventPump" as EP 
participant "SimpleWorkItemDispatcher" as SWID
participant "WorkItem" as WI <<CompositeWorkItem>>


ER -> FC** : Create(assemblyPath,idPrefix,settings) 
FC -> DTAB** : Create
FC -> NTAR** : Create
ER -> FC : LoadTests()
FC -> NTAR  : Load
alt RunTests, no callbackl
ER -> FC : RunTests(filter)
else RunTests, with callback
ER -> FC : RunTests(Action callback,filter)
FC -> FC : CreateHandler(callback)
FC -> TPR**: Create(handler)
end
FC -> NTAR : Run(testprogressreporter,filter)
activate NTAR
NTAR -> NTAR : RunAsync(listener,filter)
activate NTAR
NTAR -> NTAR: CreateTEC(loadedTests,listener)
activate NTAR
NTAR -> TEC** : Create
NTAR -> TEC : Set(listener)
alt RunOnMainThread
NTAR -> MainThreadWorkItemDispatcher : Create
else RunParallel
NTAR -> ParallelWorkItemDispatcher : Create
else RunOnThreadPool
NTAR -> SimpleWorkItemDispatcher : Create
end
NTAR -> TEC : Set(dispatcher)
deactivate NTAR
NTAR -> NTAR : StartRun(context,TopLevelWorkItem,listener)
activate NTAR
NTAR -> QEL** : Create
note over QEL: Specific to an Event type
QEL -> EQ**: Create()
NTAR -> TEC: Set(listener)
NTAR -> EP**: Create(listener,queue.Events)
NTAR -> EP** : Create(listener)
NTAR -> EP : Start()
NTAR -> SWID : Start(topLevelWorkItem)
SWID -> WI : Execute
@enduml
